.data
ent: .asciiz "Insira o valor de Vet["
ent2: .asciiz "]: "
msg1: .asciiz "\nEntre com um valor 'N' que seja inteiro e (N>1):"
msg2: .asciiz "\nEntre com uma chave 'K' que seja inteiro e (N>1):"
msg3: .asciiz " é Perfeito!"
msg4: .asciiz "\nO número digitado não é válido, tente novamente (N>1): "
msg5: .asciiz "\nO número "
msg6: .asciiz " é Perfeito! "
.align 2
vet: .space 20
vetaux: .space 20
num: .space 20
ck: .space 20

.text	

main:   la $a2, ck #Endereço do ck como parametro
	jal chavek #chavek(ck)
	move $a2, $v0 #Endereço do numero retornado
	la $a0, num #Endereço do vetor como parametro
	jal numero #numero(num)
	move $a0, $v0 #Endereço do numero retornado
	la $a1, vet #Endereço do vetor como parametro
	jal leitura #leitura(vet)
	move $a1, $v0 #Endereço do vetor retornado
	la $a3, vetaux #Endereço do vetaux como parametro
	jal altera #altera(vet)
	jal escrita #escrita(vet)
	li $v0, 10  #Código para finalizar o programa
	syscall #Finaliza o programa

numero:
	move $t0, $a0 #Salva o endereço base de num
	la $a0, msg1 #Carrega o endereço da string
	li $v0, 4 #Codigo de impressão de string
	syscall #impressão da string
	li $v0, 5 #Código de leitura de inteiro
	syscall #Leitura do valor
	sw $v0, ($t0) #Salva o valor lido em num
	move $v0, $t0 #endereço de num para retorno
	jr $ra #Retorna para a main
	
chavek:
	move $t0, $a2 #Salva o endereço base de num
	la $a0, msg2 #Carrega o endereço da string
	li $v0, 4 #Codigo de impressão de string
	syscall #impressão da string
	li $v0, 5 #Código de leitura de inteiro
	syscall #Leitura do valor
	sw $v0, ($t0) #Salva o valor lido em num
	
	move $v0, $t0 #endereço de num para retorno
	jr $ra #Retorna para a main
	
leitura:
	move $t0, $a0 #Salva o endereço base de num
	lw $t5, ($t0) #Carrega o valor de num
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	li $t2, 0 #i = 0
l:
	la $a0, ent #Carrega o endereço da string
	li $v0, 4 #Codigo de impressão de string
	syscall #impressão da string
	move $a0, $t2 #Carrega o índice do vetor
	li $v0, 1 #Código de impressão de inteiro
	syscall #Imprime o indice i
	la $a0, ent2 #Carrega o endereço da string
	li $v0, 4 #Código de impressão de string
	syscall #impressão de string
	li $v0, 5 #Código de leitura de inteiro
	syscall #Leitura do valor
	sw $v0, ($t1) #Salva o valor lido em vet[i]
	add $t1, $t1, 4 #Endereço de vet[i+1]
	addi $t2, $t2, 1 #i++
	blt  $t2, $t5, l #if(i<5)goto l
	move $v0, $t0 #endereço de vet para retorno
	jr $ra #Retorna para a main
	
altera:
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	move $t3, $a2 #Endereço de ck
	lw $a2, ($t3) #Carrega o valor de ck
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	li $t2, 0 #i=0
	j a #vai para o label a
	
positivo:
	
negativo:

a:
	lw $a0, ($t1) #Carrega o valor de vet[i]
	move $t2,$t3 #copia valor de i
	sub $t3,$t3,$a3 #subtrai a posiçaõ do total de dados
	add $t3,$t3,$a2 #acha a posição que deve estar o vetor
	bltz $t3,negativo #vai para o label negativo
	j positivo #Else vai pra positivo
	
	add $t1, $t1, 4 #endereço de vet[i+1]
	addi $t2, $t2, 1 #i++
	
	blt $t2, $a3, a #if(i<num) goto a
	
	
final:	
	move $v0, $t0 #Endereço de vet para retorno
	jr $ra #Retorna para a main
	
escrita:
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	li $t2, 0 #i=0
e:	
	lw $a0, ($t1) #Carrega o valor de vet[i]
	li $v0, 1 #Código de impressão de inteiro
	syscall #Imprime vet[i]
	li $a0, 32 #Código ASCII para espaço
	li $v0, 11 #Código de impressão de caractere
	syscall #Imprime um espaço
	add $t1, $t1, 4 #endereço de vet[i+1]
	addi $t2, $t2, 1 #i++
	blt $t2, $a3, e #if(i<5) goto e
	move $v0, $t0 #Endereço de vet para retorno
	jr $ra #Retorna para a main
	
.data
ord: .asciiz "Ordem da matriz: "
Ent1: .asciiz "Insira o valor de matriz["
Ent2: .asciiz "]["
Ent3: .asciiz "]: "
debug1: .asciiz "\n percorreColuna\n"
.text
	
main:	la $a0, ord # carrega o endereço da string
	li $v0, 4		
	syscall			
	li $v0, 5		# codigo de leitura de inteiro
	syscall			# leitura do valor (retorna em $v0)
	bge $v0, 8, main	#volta caso seja de ordem maior que 8
	move $a1, $v0		# número de linhas recebe $v0
	move $a2, $v0		# número de colunas recebe $v0
	mul $a0, $v0, 4		# $a0 = tamanho da matriz * 4
	li $v0, 9		# código de alocação dinamica
	syscall			# aloca tamanho * 4 bytes (endereço em $v0)
	la $a0, ($v0)		# $a0 aponta para $v0 (local onde a matriz esta alocada)
	jal leitura		# leitura (matriz, numeroLinhas, numeroColunas) retorna matriz em $v0
	move $a0, $v0		# move o endereço da matriz para argumento $a0
	jal percorreLinhas	# percorreLinhas(matriz, numeroLinhas, numeroColunas)
	move $a0, $v0		# move o endereço da matriz para argumento $a0
	jal escrita # escrita (mat, nlin, ncol)
	li $v0, 10		# código para finalizar o programa
	syscall			# finaliza o programa

indice:	mul $v0, $t0, $a2	# i * numeroColunas
	add $v0, $v0, $t1	# (i * numeroColunas) + j
	sll $v0, $v0, 2		# [(i * numeroColunas) + j] * 4 (inteiro)
	add $v0, $v0, $a3	# soma o endereço base de matriz
	jr $ra			# retorna para o caller

leitura:subi $sp, $sp, 4	# espaço para 1 item na pilha
	sw $ra, ($sp)		# salva o retorno para a main
	move $a3, $a0		# aux = endereço base de matriz
	
l:	la $a0, Ent1	# carrega o endereço da string
	li $v0, 4		# código de impressão de string
	syscall			# imprime a string
	move $a0, $t0		# valor de i para impressao
	li $v0, 1		# código de impressao de inteiro
	syscall			# imprime i
	la $a0, Ent2	# carrega o endereço da string
	li $v0, 4		# código de impressão de string
	syscall			# imprime a string
	move $a0, $t1		# valor de j para impressao
	li $v0, 1		# código de impressao de inteiro
	syscall			# imprime j
	la $a0, Ent3	# carrega o endereço da string
	li $v0, 4		# código de impressão de string
	syscall			# imprime a string
	li $v0, 5		# codigo de leitura de inteiro
	syscall			# leitura do valor (retorna em $v0)
	move $t2, $v0		# aux = valor lido
	jal indice		# calcula o endereço de matriz[i][j]
	sw $t2, ($v0)		# matriz[i][j] = aux
	addi $t1, $t1, 1	# j++
	blt $t1, $a2, l		# if (j < numeroColunas1) goto 1
	li $t1, 0		# j = 0
	addi $t0, $t0, 1	# i++
	blt $t0, $a1, l		# if (i < numeroLinhas) goto 1
	li $t0, 0		# i = 0
	lw $ra, ($sp)		# recupera o retorno para a main
	addi $sp, $sp, 4	# libera o espaço na pilha
	move $v0, $a3		# endereço da matriz para retorno
	jr $ra

escrita:
   	subi $sp, $sp, 4 # Espaço para 1 item na pilha
   	sw $ra, ($sp) # Salva o retorno para a main
   	move $a3, $a0 # aux = endereço base de mat
e: 
	jal indice # Calcula o endereço de mat [i] [j]
  	lw $a0, ($v0) # Valor em mat [i][j]
  	li $v0, 1 # Código de impressão de inteiro
   	syscall # Imprine mat [i] [j]
  	la $a0, 32 # Código ASCII para espaço
   	li $v0, 11 # Código de impressão de caractere
  	syscall # Imprime o espaço
   	addi $t1, $t1, 1 # j++
   	blt $t1, $a2, e # if(j < ncol) goto e
   	la $a0, 10 # Código ASCII para newline ('\n')
   	syscall # Pula a linha
  	li $t1, 0 # j = 0
   	addi $t0, $t0, 1 # i++
   	blt $t0, $a1, e # if(i < nlin) goto e
  	li $t0, 0 #i - 0
   	lw $ra, ($sp) # Recupera o retorno para a main
   	addi $sp, $sp, 4 # Liberao espaço na pilha
   	move $v0, $a3 # Endereço base da matriz para retorn0
   	jr $ra # Retorna para a main

percorreLinhas:
	subi $sp, $sp, 4	# espaço para 1 item na pilha
	sw $ra, ($sp)		# salva o retorno para a main
	move $a3, $a0		# aux = endereço base de matriz
	li $s0, 3		# 3 unidades
	li $t7, 0		# variavel intermediaria = 0
	
pL:	jal indice		# calcula o endereço de matriz[i][j]
	lw $t7, ($v0)		# t7 = valor de matriz[i][j]
	addi $t7, $t7, 3	# add 3 unidades
	sw $t7, ($v0)		# Salva na memória o novo valor
	addi, $t1, $t1, 1	# j++
	blt $t1, $a2, pL	# if (j < numeroColunas) goto pL
	li $s0, 0		# soma = 0
	li $t1, 0		# j = 0
	addi $t0, $t0, 1	# i++
	blt $t0, $a1, pL	# if (i < numeroLinhas) goto pL
	li $t0, 0		# i = 0
	lw $ra, ($sp)		# recupera o endereço de retorno pra main
	addi $sp, $sp, 4	# libera espaço na pilha
	move $v0, $a3		# endereço base da matriz para retorno
	jr $ra 			#retorna para a main
	

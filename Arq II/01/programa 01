.data
ent: .asciiz "Insira o valor de Vet["
ent2: .asciiz "]: "
msg1: .asciiz "\nEntre com um valor 'N' que seja inteiro e (N>1):"
msg4: .asciiz "\nO número digitado não é válido, tente novamente (N>1): "

.align 2
vet: .space 20
num: .space 20

.text	

main:   la $a0, num #Endereço do vetor como parametro
	jal numero #numero(num)
	move $a0, $v0 #Endereço do numero retornado
	la $a1, vet #Endereço do vetor como parametro
	jal leitura #leitura(vet)
	move $a1, $v0 #Endereço do vetor retornado
	jal escrita #escrita(vet)
	li $v0, 10  #Código para finalizar o programa
	syscall #Finaliza o programa

numero:
	move $t0, $a0 #Salva o endereço base de num
	la $a0, msg1 #Carrega o endereço da string
	li $v0, 4 #Codigo de impressão de string
	syscall #impressão da string
	li $v0, 5 #Código de leitura de inteiro
	syscall #Leitura do valor
	sw $v0, ($t0) #Salva o valor lido em num
	blt $v0, 1, invalido #Vai para invalido caso valor seja menor que 1
	move $v0, $t0 #endereço de num para retorno
	jr $ra #Retorna para a main

invalido:
	li $v0,4 #Código Syscall escrever string
	la $a0,msg4 #Parâmetro a ser escrito
	syscall
	j numero #Pula para o final, para aguardar um ultimo enter
	
	
leitura:
	move $t0, $a0 #Salva o endereço base de num
	lw $a3, ($t0) #Carrega o valor de num
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	li $t2, 0 #i = 0
l:
	la $a0, ent #Carrega o endereço da string
	li $v0, 4 #Codigo de impressão de string
	syscall #impressão da string
	move $a0, $t2 #Carrega o índice do vetor
	li $v0, 1 #Código de impressão de inteiro
	syscall #Imprime o indice i
	la $a0, ent2 #Carrega o endereço da string
	li $v0, 4 #Código de impressão de string
	syscall #impressão de string
	li $v0, 5 #Código de leitura de inteiro
	syscall #Leitura do valor
	sw $v0, ($t1) #Salva o valor lido em vet[i]
	add $t1, $t1, 4 #Endereço de vet[i+1]
	addi $t2, $t2, 1 #i++
	blt  $t2, $a3, l #if(i<5)goto l
	move $v0, $t0 #endereço de vet para retorno
	jr $ra #Retorna para a main

ordena:
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	move $t4, $t0 #Endereço de vet[j]
	li $t2, 0 #i=0
	li $t3, 0 #j=0
o:
	lw $a0, ($t1) #Carrega o valor de vet[i]
	lw $a1, ($t1) #Carrega o valor de vet[j]
	bgt $a0,$a1,troca #caso um maior que o outro vai para troca
	
troca:
	sw $a0,($t4) #vet[j]=vet[i]
	sw $a1,($t1) #vet[i]=vet[j]

somapar:
	move $t0, $a0 #Salva o endereço base de num
	lw $a3, ($t0) #Carrega o valor de num
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	mul $t1,$t1,4 #multiplica por 4 o endereço
	li $t2, 0 #i=0
	li $t3,0 #soma=0
s:
	mul $t1,$t1,$t2 #vai percorrer os endereços	
	lw $a0, ($t1) #Carrega o valor de vet[i]
	add $t3,$t3,$a0 #soma+=vet[i]
	bge $t2,$a3, final
	addi $t2,$t2,8 #pula de 2 em 2
	j s #volta pro loop

final: 
	move $v0, $t0 #Endereço de vet para retorno
	jr $ra #Retorna para a main

escrita:
	move $t0, $a1 #Salva o endereço base de vet
	move $t1, $t0 #Endereço de vet[i]
	li $t2, 0 #i=0
e:	
	lw $a0, ($t1) #Carrega o valor de vet[i]
	li $v0, 1 #Código de impressão de inteiro
	syscall #Imprime vet[i]
	li $a0, 32 #Código ASCII para espaço
	li $v0, 11 #Código de impressão de caractere
	syscall #Imprime um espaço
	add $t1, $t1, 4 #endereço de vet[i+1]
	addi $t2, $t2, 1 #i++
	blt $t2, $a3, e #if(i<5) goto e
	move $v0, $t0 #Endereço de vet para retorno
	jr $ra #Retorna para a main
	